### 1. 仕様書

このアプリケーションは、大学の音楽サークル向けのスタジオ予約システムです。主な機能は以下の通りです。

**ユーザー機能**

*   **LINEログイン:** LINEアカウントを使用してログインします。
*   **スタジオ予約:**
    *   名工大と金城学院大の2つのスタジオの空き状況をカレンダー形式で確認できます。
    *   希望する時間帯を選択して予約できます。
    *   予約には複数のメンバーを登録できます。
    *   予約時にメンバーをプリセットとして保存し、次回以降簡単に呼び出せます。
*   **予約編集:**
    *   自分が参加している予約のメンバーを追加・削除できます。
    *   自分が参加している予約をキャンセルできます（前日まで）。
*   **バンド管理:**
    *   バンドを作成し、メンバーを登録できます。
    *   自分が所属するバンドのメンバーを編集できます。
    *   バンドをプリセットに登録できます。
*   **料金確認:**
    *   スタジオ使用料、ライブ出演費、罰金、未払金の合計金額を確認できます。

**管理者機能**

*   **パスワード認証:** 管理者機能にアクセスするためのパスワード認証があります。
*   **予約管理:**
    *   全ての予約を一覧で確認し、編集・削除できます。
    *   特定の期間の予約を検索・削除できます。
    *   管理者権限で予約を作成できます。
*   **メンバー管理:**
    *   全部員の情報を一覧で確認し、削除できます。
*   **バンド管理:**
    *   全てのバンド情報を一覧で確認し、削除できます。
*   **料金管理:**
    *   部員ごとのスタジオ使用料、ライブ出演費、罰金、未払金を管理できます。
    *   指定した期間の予約情報から、スタジオ使用料とライブ出演費を自動計算します。
    *   計算後、各部員にLINEで料金を通知し、未払金に加算します。
    *   料金確定後、指定期間の予約とバンド情報を全て削除します。
*   **システム設定:**
    *   予約可能な期間を1週間または2週間に設定できます。
    *   特定の期間、スタジオの予約を禁止できます。
    *   管理者のパスワードを変更できます。
    *   予約の優先権を設定できます（詳細は不明）。

### 2. Next.jsでのブラッシュアップとディレクトリ構成

Next.js (App Router) を使用してこのアプリケーションをブラッシュアップする場合、以下のようなディレクトリ構成が考えられます。

```
/
├── .next/
├── .vercel/
├── public/
│   └── (静的ファイル)
├── src/
│   ├── app/
│   │   ├── (main)/
│   │   │   ├── layout.tsx
│   │   │   └── page.tsx
│   │   ├── kinjyou/
│   │   │   └── page.tsx
│   │   ├── meikou/
│   │   │   └── page.tsx
│   │   └── api/
│   │       └── send-message/
│   │           └── route.ts
│   ├── components/
│   │   ├── ui/ (shadcn/uiなどのUIコンポーネント)
│   │   │   ├── button.tsx
│   │   │   ├── calendar.tsx
│   │   │   └── ...
│   │   ├── (機能ごとのコンポーネント)
│   │   │   ├── forms/
│   │   │   ├── hamburger-menu/
│   │   │   └── ...
│   │   └── layout/
│   │       ├── header.tsx
│   │       └── ...
│   ├── contexts/
│   │   ├── booking-context.tsx
│   │   ├── line-id-context.tsx
│   │   └── priority-context.tsx
│   ├── firebase/
│   │   ├── client.ts
│   │   └── service.ts
│   ├── liff/
│   │   └── liff-service.ts
│   ├── types/
│   │   ├── index.ts
│   │   └── style.d.ts
│   └── utils/
│       ├── index.ts
│       └── swal.ts
├── .firebaserc
├── .gitignore
├── database.rules.json
├── eslint.config.js
├── firebase.json
├── next.config.mjs
├── package.json
├── postcss.config.js
├── tailwind.config.ts
└── tsconfig.json
```

**主な変更点:**

*   **`app` Router:** `pages` ディレクトリの代わりに `app` ディレクトリを使用し、ルーティングとレイアウトを管理します。
*   **Server Components:** データ取得など、サーバーサイドで完結できる処理はServer Componentsで行い、パフォーマンスを向上させます。
*   **API Routes:** `api` ディレクトリ内の `route.ts` でAPIエンドポイントを定義します。
*   **UIコンポーネント:** `shadcn/ui` などのヘッドレスUIライブラリを導入し、`components/ui` に配置することで、より再利用性が高くアクセシブルなUIを構築します。
*   **状態管理:** Context APIは引き続き利用できますが、より複雑な状態管理にはZustandやJotaiなどの導入も検討できます。
*   **Firebase:** Firebaseの初期化コードをクライアントサイド (`client.ts`) とサーバーサイド (`service.ts`) で分離し、適切に使い分けます。

### 3. Firestoreのアクセス回数を減らす工夫

現状のコードでは、`onSnapshot` を多用しており、データの変更があるたびに再取得が発生しています。これにより、不要な読み取りが増加する可能性があります。アクセス回数を減らすためには、以下の工夫が考えられます。

*   **`getDocs` の活用:** リアルタイム更新が不要なデータ（例: ユーザー一覧、バンド一覧）は、`onSnapshot` の代わりに `getDocs` を使用して一度だけ取得します。
*   **Contextとキャッシュ:** `useContext` と `useState` を組み合わせることで、一度取得したデータをクライアントサイドでキャッシュし、不要な再取得を防ぎます。例えば、`LineIdProvider` のように、アプリケーションのライフサイクルで変更が少ないデータをContextで保持します。
*   **データの非正規化:** 複数のコレクションにまたがるデータを取得する必要がある場合、あらかじめデータを非正規化して1つのドキュメントにまとめておくことで、読み取り回数を削減できます。例えば、予約情報に予約者の名前だけでなくLINE IDも保持することで、ユーザー情報を別途取得する必要がなくなります。
*   **集計フィールドの活用:** 料金計算など、複数のドキュメントを集計する必要がある場合、Cloud Functionsなどを使用してバッチ処理で集計し、結果を別のフィールドに保存しておくことで、クライアントサイドでの複雑なクエリや大量の読み取りを回避できます。
*   **クエリの最適化:** `where` や `limit` を使用して、必要なデータのみを取得するようにクエリを最適化します。

### 4. その他、直した方がいいところ

*   **コンポーネントの分割:** `HamburgerMenu.tsx` が非常に大きく、多くの機能が詰め込まれています。各機能を個別のコンポーネントに分割し、`HamburgerMenu.tsx` はそれらを呼び出すだけのシンプルなコンポーネントにリファクタリングすることで、可読性とメンテナンス性が向上します。
*   **型定義の共通化:** `type.ts` に型定義をまとめていますが、各コンポーネントで個別に型を定義している箇所も見られます。型定義を `types` ディレクトリに集約し、一貫性を保つようにします。
*   **環境変数の管理:** `.env` ファイルで環境変数を管理していますが、Vercelなどのホスティングサービスを利用する場合は、サービスの環境変数設定機能を使用することが推奨されます。
*   **エラーハンドリング:** `try...catch` でエラーを捕捉していますが、ユーザーへのフィードバックが不足している箇所があります。`swal` を活用して、より分かりやすいエラーメッセージをユーザーに提示するようにします。
*   **セキュリティ:** 現在、クライアントサイドでFirebaseの多くの操作を行っていますが、セキュリティ上重要な操作（例: 料金計算、ユーザー削除）は、Cloud Functionsなどのサーバーサイドで実行し、クライアントからはそれを呼び出すだけにするのが望ましいです。これにより、不正な操作を防ぐことができます。
